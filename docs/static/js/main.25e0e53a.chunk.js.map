{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","GifGridItem","url","title","className","src","alt","getGifs","category","a","encodeURI","fetch","response","json","data","gifs","map","image","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifApp","ReactDOM","render","document","getElementById"],"mappings":"+LAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAgB9C,OACI,0BAAMC,SATW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAACS,GAAD,OAAiBP,GAAjB,mBAAgCO,OAC9CN,EAAc,OAMhB,2BACEO,KAAK,OACLC,MAAOT,EACPU,SAjBkB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,YCNlBG,EAAc,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,IAAKC,EAAW,EAAXA,MAC9B,OACI,yBAAKC,UAAU,QACX,yBAAKC,IAAMH,EAAMI,IAAMH,IACvB,2BAAKA,K,uBCNJI,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,4DACJ,mCACD,GACRP,EAHa,uDACJ,mCADI,cAGqDQ,UAAUF,GAH/D,kBAEL,IAFK,SAIIG,MAAMT,GAJV,cAIbU,EAJa,gBAKIA,EAASC,OALb,uBAKXC,EALW,EAKXA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAK,YAAK,CACxBC,GAAID,EAAMC,GACVf,MAAOc,EAAMd,MACbD,IAAG,UAAEe,EAAME,cAAR,aAAE,EAAcC,iBAAiBlB,QATzB,kBAYZa,GAZY,4CAAH,sDCKPM,EAAU,SAAC,GAAgB,IAAfb,EAAc,EAAdA,SAAc,ECFX,SAACA,GAAc,IAAD,EAEZpB,mBAAS,CAC/B0B,KAAM,GACNQ,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAiBtC,OAVAC,qBAAU,WACNlB,EAAQC,GACPkB,MAAK,SAAAC,GACFH,EAAS,CACLV,KAAMa,EACNL,SAAS,SAGlB,CAACd,IAEGe,EDb2BK,CAAapB,GAAjCW,EAFqB,EAE3BL,KAAcQ,EAFa,EAEbA,QAEtB,OACI,oCACI,4BAAKd,GAEHc,GAAW,cAEb,yBAAKlB,UAAU,aAEPe,EAAOH,KAAI,SAAAC,GAAK,OACZ,kBAAC,EAAD,eACIY,IAAKZ,EAAMC,IACPD,UEhBnBa,EAAS,WAAO,IAAD,EAEY1C,mBAAS,CAAC,cAFtB,mBAEjBQ,EAFiB,KAELT,EAFK,KAIxB,OACI,oCACI,sCACA,6BACA,kBAAC,EAAD,CAAaA,cAAeA,IAExBS,EAAWoB,KAAI,SAAAR,GAAQ,OACnB,kBAAC,EAAD,CACIqB,IAAKrB,EACLA,SAAUA,SCZlCuB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.25e0e53a.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState(\"\")\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories((categories) => [inputValue, ...categories]);\r\n            setInputValue(\"\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            value={inputValue}\r\n            onChange={handleInputChange}\r\n          />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({url, title}) => {\r\n    return (\r\n        <div className=\"card\">\r\n            <img src={ url } alt={ title } />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","export const getGifs = async(category) => {\r\n    const apiKey = 'jCbJ0pCwkxawxQjqhaK550spjjq8oELV';\r\n    const limit = 10;\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=${apiKey}&q=${encodeURI(category)}&limit=${limit}`;\r\n    const response = await fetch(url);\r\n    const { data } = await response.json();\r\n    const gifs = data.map(image => ({\r\n            id: image.id,\r\n            title: image.title,\r\n            url: image.images?.downsized_medium.url\r\n        })\r\n    );\r\n    return gifs;\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const { data: images, loading } = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n\r\n            { loading && 'Cargando...' }\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map(image => \r\n                        <GifGridItem \r\n                            key={image.id}\r\n                            {...image}\r\n                        />\r\n                    )\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nGifGrid.propTypes = {\r\n    category: PropTypes.string.isRequired\r\n}","import { useState, useEffect } from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n        .then(imgs => {\r\n            setState({\r\n                data: imgs,\r\n                loading: false\r\n            })\r\n        })\r\n    }, [category]);\r\n\r\n    return state;\r\n\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['One Punch'])\r\n\r\n    return (\r\n        <>\r\n            <h2>GifApp</h2>\r\n            <hr />\r\n            <AddCategory setCategories={setCategories} />\r\n            {\r\n                categories.map(category => (\r\n                    <GifGrid \r\n                        key={category}\r\n                        category={category}\r\n                    />\r\n                ))\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifApp } from './GifApp';\n\nReactDOM.render(\n  <GifApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}